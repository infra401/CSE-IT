*******************
CLASS 1
*******************

Introdunction to Data Structures
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

What is Data?
The quantities, characters or symbols on which operations are performed by a computer, which may be stored and transmitted in the form of electrical signals
and recorded on magnetic , optical or mechanical recording media. 
 ex:- c = a + b

WHen Data becomes information?

Data: ANIANUS SI EMAN YM
Information : MY NAME IS SUNAINA

If data is structured in a systematic way then it gets a structure and become meaningful. 
This meaningful or processed data is called information.

Its not difficult to understand that the data needs to be managed in such a way so that it can produce some meaningful information.

To provide an appropriate way to structure the data, we need to know about
DATA STRUCTURES

What is a Data Structure?
A data structure is a systematic way to organize data so that it can be used efficiently.
Ex: arrays

Instead of creating multiple variables of same type, why not create an array to store all the values.
Storing strings is equivalent of storing a sequence of characters. This requires an array.

Some real life examples:

1. Did you know?
Stack data structure is used in implementing redo and undo feature.

The primary goal of neso academy is to provide quality education
  |              | 
  |              |
  | cation       |
  | ed           |
  | quality      |
  ----------------
    undo stack

press ctrl+z (undo )

it selects the element and pop it out
into redo stack

|        |
|        |
| cation |
|        |
----------
ctrl+ y (redo)

Ex 2:-
Which data structure is used to store an image as a bitmap ?
ARRAYS

Bitmap images are stored as a series of tiny dots called pixels.
Here each pixel is usually a small square that is assigned a color and then aranged in a pattern to form an image
A 2 dimensional array of size 37 x 40 is enough to store this image.

ex 3:-
Storing the friendship information on a social networking site

using graph

 James-------------------------Mark
  |                              |
  |                              |
  |                              |
Lia----------------------------Lucy

Graph ata structure is used to store this information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

***************
CLASS 2
***************
Data Types vs Abstract Data Types
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

What is a Data Type?

Two important things about data types:
1. Defines a certain domain of values
2. Defines Operations allowed on those values.

Example:-

int type
- takes only integer values
- Operations: addition,subtraction, multiplication, bitwise operations etc.

float type
- Takes only floating point values
- Operations: addition, subtractions, multiplication, division etc (bitwise and % operations are not allowed).


USER DEFINED DATA TYPES
-------------------------
In contrast to primitive data types, there is a concept of user defined data types.
The operations and values of user defined data types are not specified in the language but is specified by the user.

example: structure, union and enumeration

By using structures, we are defining our own type by combining other data types.

   struct point {
          int x;
          int y;
   };


ABSTRACT DATA TYPES (ADT)
-----------------------------
ADTs are like user defined data types which defines operations on values using functions without specifying 
what is there inside the function and how the operations are performed.

example: Stack ADT

Operations:
initialize() - initializing it to be empty
Push() - insert an element into the stack
Pop() - Delete an element from the stack
isEmpty() - checks if stack is empty
isFull() - checks if stack is full


Think of ADT as a black box which hides the inner structure and design of the data type from the user.
There are multiple ways to implement an ADT.

example: 
A stack ADT can be implemented using arrays or linked lists.


Why ADT ?
-----------------
The program which uses data strucutre is called client program
It has access to the ADT i.s interface.
The program which implements the data structure is known as the implementation.

Advantage:-
Let say, if someone wnats to use the stack in the program, then he can simply use push and pop operations 
without knowing its implementation.
Also, in future, the implementation of stack is changed from array to linked list, then the client program will work in the 
same way without being affected.

Conclusion
ADT provies ABSTRACTION.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
******************
CLASS 3
*******************

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Data Structure definition and advantages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

What is a Data Structure?
A stack ADT can be implemented using arrays or linked lists.
                                       |          |
                                    Data Structures

A data structure is the organisation of the data in a way so that it can be used efficiently.
In other words, it is used to implement an ADT.

For example, in order to implement stack ADT, we can use an array data structure or linked list data structure.

ADT tells us what is to be done and data structures tells us how to do it.


How to know which data structure to use for a particular ADT ?

Which Data Structure ?
In reality, different implementations of ADT are compared for time and space efficiency. 
The one best suited according to the current requirement of the user will be selected.

Example:
                                      Stack ADT
                -------------------------------------| |-----------------------------------
                | can be implemented using                     can be implemented using   |
                ⬇                                                                         ⬇
               Arrays                                                                Linked List


Advantages of Data Structures :-
Efficiency - proper choice of data strucutres make program efficient in terms of space and time.
Reusability - one implementation can be used by multiple client programs.
Abstraction - Data structure is specified by an ADT which provides a level of abstraction. The client program doesn't have to worry about
              the implementation details.



******************
CLASS 4
******************

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TYPES OF DATA STRUCTURES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1. Linear Data Structures
2. Non Linear Data Structures


LINEAR DATA STRUCTURES
----------------------------------
A data structure is linear when all the elements are arranged in a linear (sequential) order.

-------------------------------
|  1  |  2  |  3  |  4  |  5  |  ARRAY
-------------------------------

----------------------------
   |  1  |  1  |  1  |             QUEUE
----------------------------

|         |
|         | STACK
|_________|  

--------------      ---------------
| data | adr |      | data | addr |  LINKED LIST
--------------      ---------------


NON LINEAR DATA STRUCTURES
--------------------------------
A data strucutre is non linear when all the elements are not arranged in a linear (sequential) order. 
There is no linear arrangement of the elements.

                 ------
                 |    |
                 ------
                   |
             ------|-------     
        |----|          |----|
        |    |          |    |
        ------          ------
     -----|----
  |----|   |----|
  |    |   |    |          TREE
  |----|   |----|  


lice------jo
|          |
ace--------som

GRAPH


Compile time = when we are creating the code


STATIC DATA STRUCUTRES
--------------------------
In these type of data structures, the memroy is allocated at compile time.
Therefore, maximum size is fixed.

advantage: fast access
disadvantage: slower insertion and deletion

-------------------------------
|  1  |  2  |  3  |  4  |  5  |  ARRAY
-------------------------------

DYNAMIC DATA STRUCTURES
------------------------------
In these type of data strucutres, the memory is allocated at run time. Therefore, maximum size is flexible.

advantage: faster insertion and deletion
disadvantage: slower access

--------------      ---------------
| data | adr |      | data | addr |  LINKED LIST
--------------      ---------------


*****************
CLASS 5
*****************

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BASICS OF ASYMPTOTIC ANALYSIS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A data strucutre is the organisation of the data in a way so that it can be used efficiently.
In order to use data efficiently, we have to store it efficiently.

EFFICIENCY
Efficiency of data structures is always measured in terms of time and space.

An ideal data structure could be the one that takes the least possible time for all its operations and consumes the least memory space.

Our focus will be on finding the time complexity

Q. On what basis, we could compare the time complexity of the data structures?
A. On the basis of operations performed on them.

ex:- 
    ----------------------------------------------------
arr |  1  |  2  |  6  |  3  |  8  |  56  |  32  |  34  |  ARRAY 
    ----------------------------------------------------

Target: add data at the beginning of the list

    ----------------------------------------------------
arr |  1  |  2  |  6  |  3  |  8  |  56  |  32  |  34  |  
    ----------------------------------------------------
      ⬆
  ------
  | 4  |
  ------

Shift all the elements towards right.

    -----------------------------------------------------------
arr |  4  |   1  |  2  |  6  |  3  |  8  |  56  |  32  |  34  |   ARRAY 
    -----------------------------------------------------------

  Head
    ⬆
------------       ------------         ------------
| 1 | 2000 | ----> | 2 | 3000 | ------> | 6 | NULL |  
------------       ------------         ------------
 1000                2000                  3000            LINKED LIST

------------
| 4 | NULL |
------------
  4000


 Head
    ⬆
------------      ------------  ------------         ------------
| 4 | 1000 | ---->| 1 | 2000 |  | 2 | 3000 | ------> | 6 | NULL |  
------------      ------------  ------------         ------------
 4000                1000          2000                  3000       


CONCLUSION :-
Inserting an element at the beginning of the list is way faster in the linked list that arrays.
In this way, we can compare data structures, and this will ultimately give the idea to select the best possible data strucutre for a particular operation.


*******************
CLASS 6
******************
BASICS OF ASYMPTOTIC ANALYSIS

What we learned so far?
Discussed, what is efficiency in terms of data structures.
On what basis, we could compare the time complexity of the data structures?

But how to find the time complexity or running time of an operation performed on data structures?

HOW To Find The Time Complexity ?

Method #1 : 
Examine the exact running time

Pick up some machine and turn the timer on Run the operation for different inputs on the data strucutres 
you want to compare one by one and see how much time a particular operation will take on these data structures.
The one who takes lee time is the best performer.

For better analysis, you can compare the data structures on different machines.

Problems with this approach:
It might be possible that for some input size, first data structure gives the best performance and for the other input size,
the second gives the best performance.
It might also be possible that in some machine for some input size of data structure, it is performing well while in the
other machine, the second data strucutre is performing well with a different size.

Therefore, 
Examining the exact running time is not the best solution to calculate the time complexity.

************
CLASS 7
************
BASICS OF ASYMPTOTIC ANALYSIS

So, what is the best solution to this problem?

Points to be noted:
Measuring the actual running time is not practical at all.
The running time generally depends on the size of the input.

Ex :
    -------------
arr | 4 | 1 | 2 | 
    -------------
we want to add one more element to the beginning of the list
If one shift takes 1 unit of time then 3 shifts will take 3 units of time
    -----------------
arr | 3 | 4 | 1 | 2 |
    -----------------

But what if we have 10000 elements in an array?

In that case, we have to make 10000 shifts which will take 10000 units of time.
This clearly shows that the running time generally depends on the size of the input.

Therefore, if the size of the input is n, f(n) is a function of n denotes the time complexity.
In other words, f(n) represents the number of instructions executed for the input value n.

for example:
 for(i=0; i<n; i++) {
    printf("Hello World");  <------- Assuming, this instruction will take 1 unit of time
 } 

printf instruction is executed n number of times
therefore, f(n) = n

But, how to fin f(n) ?

FINDING F(N)
We can compare two data strucutres for a particular operation by comparing their f(n) values.
We are interested in growth rate of f(n) with respect to n because it might be possible that for smaller input size, 
one data strucutre may seem better than the other but for larger input size it may not.

This concept is applicable in comparing the two algorithms as well.

Ex:
f(n) = 5n^2 + 6n + 12

for n = 1
% of runnning time due to 5n^2 = 5 / 5+6+12 * 100 = 21.74%
% of running time due to 6n = 6 / 5+6+12 * 100 = 26.09%
% of running time due to 12 = 12 / 5+6+12 * 100 = 52.17%

----------------------------------------
| n   | 5n^2    |   6n     |   12      |
----------------------------------------
| 1   | 21.74%  | 26.09%   | 52.17%    |
----------------------------------------
| 10  | 87.41%  | 10.49%   | 2.09%     |
----------------------------------------
| 100 | 98.79% | 1.19%     | 0.02%     |
----------------------------------------
| 1000| 99.88%  | 0.12%    | 0.0002%   |
----------------------------------------

It is clear observation that for larger values of n, the squared term consumes almost 99% of time
So ,there is no harm if we can eliminate the rest of the terms as they are not contributing much to the time.

f(n) = 5n^2
We are getting the approximate time complexity and we are satisfied with this result because this approximate result
is very near to the actual result.

**************
CLASS 8
***************
BASICS OF ASYMPTOTIC ANALYSIS 

BIG O NOTATION :
It is used to measure the performance of any algorithm by providing the order of growth of the function.
It gives the upper bound on a function by which we can make sure that the function will never grow faster that its upper bound.

We want the approximate runtime of the operations performed on data structures.
We are not interested in the exact runtime.
Big O notation will help us to achieve the same.

BIG O NOTATION
If f(n) anf g(n) are two functions, then
 f(n) = Og((n))
If there exists constants c and no such that 
 f(n) <= c.g(n) , for all n >= no
This simply means that f(n) does not grow faster than g(n)

Examples:
f(n) = n    g(n) = 2n
is f(n) = O(g(n))?
f(n) <= c.g(n)
n <= c.2n
for c = 1 and no = 1

f(n) = 4n+3  g(n) = n
if f(n) = O(g(n))?
f(n) <= c.g(n)
4n+3 <= c.n
take c = 5
4n+3 <= 5n
3 <= 5n - 4n
n > 3
therefore, f(n) <= c.g(n)
for all n >= 3
where c = 5 and no = 3
f(n) = O(n)

------------------------------
| n      |  f(n)    |  g(n)  |
------------------------------
| 1      | 7        | 5      | 
------------------------------
| 2      | 11       | 10     | 
------------------------------
| 3      | 15       | 15     | 
------------------------------
| 4      | 19       | 20     | 
------------------------------
| 5      | 23       | 25     | 
------------------------------
| 6      | 27       | 30     | 
------------------------------
| 7      | 31       | 35     | 
------------------------------
| 8      | 35       | 40     | 
------------------------------
| 9      | 39       | 45     | 
------------------------------

****************
CLASS 9
***************







