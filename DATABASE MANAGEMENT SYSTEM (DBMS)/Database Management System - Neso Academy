*******************
CLASS 1
*******************
INTRODUCTION TO DATABASE MANAGEMENT SYSTEMS

Information
--------------------------
These unprocesses facts or otherwise called as data when they are processed to make a meaningful context then it is called information or in words a processed data.
ex:  The age os Suresh is 25.
here, we take raw or unprocessed facts process it to make a meaningful context, that is called information

Database
-----------------------
collection or related data 
random collection of data cannot be database
ex: online banking system, library management system

Metadata
-------------------------
it is database definition 
complete description of a database
it defines the database
information like sotrage format, ata type of data we are going to store in database or constraints on data all these information are metadata

Database Management System
-------------------------------------------------------------

Database Management System
-------------------------------------------------------------

Definition:-
- - - - - - - - - -
It is a system or software or collection of programs that enable users to create and maintain the database.

Functionalities:--
 - - - - - - - - - -   - - - -
Allows users to define, construct, manipulate and share the database
Define: Specifying the data type, structures and constraints for the data to be stored
constraints are limits on data 
Construct:  Process of storing data on some storage medium
Manipulate: Querying the database to retrieve specific data, updating database and generating reports
Share: Allows multiple users and programs to access the database concurrently or simultaneously

other functionalities include protection of database from unauthorized access, from hardware or software failures, also maintainance of the database for a long period of time 

Properties of database   
 - - - - - - - - - - - - - - - - - - -  - - 
1. A database represents some aspects of the real world (miniworld).
2. A database is a logically coherent collection of data with some inherent meaning.
3. A database is designed, built and populated with data for a specific purpose.


DB System Environment
 - - - - - - -  - - - -  -
                                                              Users/Programmers
                                                                      |
                                                                      |
                                                                      ⬇
 Database system                                        Application Programs/ Queries 
                                                                      |
                                                                      |
                                                                      ⬇
                 DBMS software                     Software to process queries/programs
                                                                      |
                                                                      ⬇
                                                 Software to access stored data  
                                                                      |
                                                                      |
                                         ---------------------------------------------------------                    
                                         ⬇                                                        ⬇
                 Stored Db Definition (Metadata)                                          Stored Database


A database that stores student and course information
 - - - - -  --  -  - - - - - - - - - - - -  - - - - - - 

  ______________________________________________________
  | STUDENT |     Name   |  Roll_No  |  Class  | Major |  ----> These columns are called as data elements
  ______________________________________________________
            |    Smith   |     17    |    1    |    CS |
            ___________________________________________ 
            |    Brown   |     8     |    2    |    CS |
            ___________________________________________ 

  _____________________________________________________________
  | COURSE |     CourseName          |  CourseNo    |  Dept   | 
  _____________________________________________________________
           |    Data Structures      |     CS1310   |    CS   |    
            ___________________________________________________ 
           |   Discrete Mathematics  |     MATH2410 |    MATH |    
            ___________________________________________________ 
           |   Database              |     CS380    |    CS   |    
            ___________________________________________________ 

  ________________________________________________________
  | GRADE_REPORT   |  Roll_No   |  CourseNo    |  Grade  | 
  ________________________________________________________
                   |    17     |    MATH2410   |    B    |    
                   _______________________________________
                   |   17      |    CS1310     |    A    | 
                  ________________________________________  
                  |   8        |     CS1310    |    A   |    
                  _______________________________________


***************
CLASS 2
***************
Characteristcis Of DBMS

File System Approach
----------------------------

                            Accounts Dept.
                                  |
           ----------------------------------------
           ⬇             ⬇           ⬇            ⬇
      Roll_No          Name     Fees Paid      Fees Due


                             Exam Dept.
                                  |
           ----------------------------------------
           ⬇             ⬇           ⬇            ⬇
      Roll_No          Name       Course      Fees Due



 DBMS Approach
----------------------
data is stored in a single repository an multiple users can access the data based on their interests

Characteristics of DBMS Approach
-----------------------------------
1. Self-Describing nature of a database system
 ~ Database system -> Database + Meta-data (DB definition)
                                      ⬇
                               Stored in: DBMS catalog
                                      ⬇
                             Used by: DBMS Software & Database Users
 We have seen an example of database that store student and course information

An example of database catalog

Relations
__________________________________
| Relation_Name  | No_of_Columns |
__________________________________
|   STUDENT      |        4      |
__________________________________
|   COURSE       |        3      |
__________________________________
| GRADE_REPORT   |        3      |
__________________________________

COLUMNS
____________________________________________________________
| Col_Name      |  Data_Tpye         | Belongs_to_Relate   |
____________________________________________________________
| Name          |  Charater(30)      |       STUDENT       |
____________________________________________________________
| Roll_No       |  Integer(4)        |       STUDENT       |
____________________________________________________________
| Class         |  Integer(1)        |       STUDENT       |
____________________________________________________________
| Major         |  Major_type        |       STUDENT       |
____________________________________________________________
| CourseName    |  Charater(0)       |       COURSE        |
____________________________________________________________
|   .....       |     ......         |     ........        |
____________________________________________________________
|   .....       |     ......         |     ........        |
____________________________________________________________
|   .....       |     ......         |     ........        |
____________________________________________________________
| Grade         |  Charater(1)       |     GRADE_REPORT    |
____________________________________________________________


 ~ DBMS software must work equally well with any number of database applications.
 ~ In traditional file processing, data definiiton --> part of application programs  -->  work with only one specific DB
2. Insulation between programs and data, and data abstraction 
 ~ In traditional file processing --> structure of data files is embedded in the application programs
 ~ In database approach --> structure of data files is stored in the DBMS catalog --> separate from access programs
    (program-data independence)


Internal storage format for a STUDENT Record 
_______________________________________________________________________________
| Data Item Name  | Starting Position in Record | Length in Characters (bytes) |
________________________________________________________________________________
|    Name         |                1             |             30              |
________________________________________________________________________________
|    Name         |                31            |             4               |
________________________________________________________________________________
|    Name         |                35            |             4               |
________________________________________________________________________________
|    Name         |                39            |             4               |
________________________________________________________________________________

 ~ THe characteristic that allows program-data independence is called data abstraction
 ~ DBMS provides users with conceptual representation of data.
 ~ Data model --> type of data abstraction --> provides conceptual representation

3. Support of multiple views of the data
 ~ A database has many users, each of whom may require a different view of database.
 ~ A view -> subset of databse --> contains virtual data derived from database (not explicitly stored)

4. Sharing of data and multiuser transaction processing
 ~ A multiuser DBMS allows multiple users to access the database at the same time.
 ~ DBMS must include concurrency control.
 ~ OLTP (Online Transaction Processing) --> major part of atabase application
 ~ DBMS must enforce several transaction properties: 
   i Isolation
   ii Atomicity


*************
CLASS 3
*************
Database Users

Actors on the scene
 ~ Database Administrators
 ~ Database Designers
 ~ End Users
 ~ System Analysts & Application Programmers (software engineers)

Workers Behind the Scene
 ~ System designers & implementers
 ~ Tool developers
 ~ Operators & maintenance personnel


Actors on the Scene
---------------------------------
 ✡ Databse Administrators
   ➡ in databse environment, primary resource --> databse, secondary resource --> DBMS & related software
   ➡ Database administrator (DBA) responsibilities :
        1. Administering primary/secondary resources
        2. Authorizing access to the database
        3. Co-ordinating & monitoring use of database.
        4. Acquiring hardware & software resources needed.

✡ Database Designers:
   ➡ Responsible for:
      1. Identifying the data to be stored in the database.
      2. Choosing appropriate structures to represent and store data
      3. Communicating with database users --> understand their requirements --> designs database

✡ End Users:
   ➡ End Users --> people whose jobs require access to the database --> for querying, updating, generating reports.
   ➡ Several categories of end users:
       ✡ Casual end users: Accesses database occasionally 
         --> typically middle or high-levl managers or other occasional browsers
       ✡ Naive or parametric end users: constantly querying and updating database using canned transactions
       ✡ Sophisticated end users: Engineers, scientists, business analysts.
       ✡ Stan-alone users: Maintains personal databases --> using ready-made program packages.

✡ System Analysts & Application Programmers (Software Engineers):
  ➡ System Analysts --> determine the requirements of end users --> develop specification for canned transactions
  ➡  Application Programmers --> test, debug, document an mainain these canned transactions. 
      

Workers Behind The Scene
-----------------------------------
✡ System designers and implementers: Design and implement DBMS modules & interfaces as a package
✡ Tool Developers: Persons who design and implement tools
                                                      ⬇
                                             software packages
✡ Operators and maintenance personnel: Responsible for actual running and maintenance of hardware & software


******************
CLASS 4
******************
Advantages & Disadvantages Of DBMS

Advantages Of DBMS Approach
--------------------------------
~ Controlling Redundancy 
~ Restricting Unauthorized Access
~ Proviidng Persistent Storage for Program Objects
~ Providing Storage Structures for efficient query processing 
~ Providing backup & recovery
~ Providing multiple user interfaces 
~ Representing complex relationships among data
~ Enforcing integrity constraints
~ Permitting inferencing and actions using rules

✡ Controlling Redundancy
 ~ In traditional file system, each user group maintains its own files.

                            Accounts Dept.
                                  |
           ----------------------------------------
           ⬇             ⬇           ⬇            ⬇
      Roll_No          Name     Fees Paid      Fees Due


                             Exam Dept.
                                  |
           ----------------------------------------
           ⬇             ⬇           ⬇            ⬇
      Roll_No          Name       Course      Fees Due

 ~ This will lead to wastage of storage, space, inconsistency
 ~ In the database approach, views of different users --> integrated
 ~ All the data stored in only one place of the database
 ~ This ensures consistency & saves storage space.

✡ Restricting Unauthorized Access
  ~ When multiple users share a large database, the type of access operation must be controlled
  ~ DBMS must provide security and authorization subsystem
  ~ DBA --> creates accounts & specifies account restrictions
  ~ Parametric users --> allowe to access database only through canned transactions.

✡ Providing Persistent Storage for Program Objects
                                           
Traditional FIle Systems                      |          DBMS            
----------------------------------------------|------------------------------------------------------
 ~ Once program terminates                    | ~  Once program terminates
              ⬇                               |             ⬇
    values of program variables               |    values of program variables
              ⬇                               |             ⬇
         discarded                            |    not discarded --> stores objects permanently. Such an object is said to be persistent         
                                              |
~ Must be explicitly stored in separate       |  ~ BUT DBMS recognizes data structure of
  permenent files --> involves conversion     |    programming languages like java, C++ --> 
                                              |    automatically converts
                                              |

✡ Providing Storage Structures for Efficient Query Processing
  ~ Database systems must provide capabilities for efficiently executing queries and updates.
  ~ Since database is stored on disk, DBMS must provide specialized data structures (indexes) to speed up disk search
  ~ Query processing and optimization module --> responsible for efficient query execution

✡ Providing Backup and Recovery
  ~ The backup and recovery subsystem of DBMS --> responsible for recovery --> in case of hardware or software failures
  ~ ex: if the computer crashes during a complex transaction, the recovery subsystem --> responsible for ensuring that transaction resumes from 
        where it is interrupted or atleast restore to the state it was before transaction started executing.

✡ Providing Multiple User Interface
  ~ Multiple users --> different levels of technical knowledge --> so BMS should provide a variety of user interfaces
  ~ Ex: Query languages --> casual users, programming language interface --> application programmers, forms --> parametric users, menu-driven interfaces --> stand-alone users
  ~ Form-style interfaces and menu-driven interfaces --> Graphical user interfaces (GUIs)

✡ Representing COmplex Relationships among Data
  ~ A databse may have variety of data -> interelated in many ways.
  ~ DBMS must be capable of:
    --> Representing complex relationships among data
    --> Retrieve and update related data easily and efficiently

✡ Enforcing Integrity Constraints
~ Simplest type of integrity constraint --> specifying data type for each ata item
~ Another type of constraint --> uniqueness of data item values
~ Responsibility of Databse designers --> identifying integrity constraints during databse design

✡ Permititng Inferencing and Actions Using Rules
~ atabse systems must provide capabilities for defining deduction rules for inferencing new information
~ Such systems --> deductive database systems
~ Active databse systems --> provides active rules that automatically initiate actions when certain events and conditions occur

✡ Additonal Implications of Using Databse Approach
   ➖ Potential for Enforcing Standards:
       ➡ DBA can define and enforce standards among database users.
       ➡ This facilitates communication & co-operation within the organization 

   ➖ Reduced Application Developemnt Time:
      ➡ Important feature of databse approach --> developing a new application takes away very little time

   ➖ Flexibility: 
      ➡ Modern DBMS allow certain types of changes to the structure of database without affecting the stored data and existing application programs

   ➖ Availability of Up-to-Date Information:
      ➡ One user's update --> all other users can immediately see this update
      ➡ Essential for many transaction-processing applications
      ➡ Made possible by concurrency control and recovery subsystems of DBMS
 
   ➖ Economies of Scale
     ➡ By considering data and applications, wasteful overlap of resources can be avoided
     ➡ Reduces overall costs of operation and management

When Not TO Use DBMS
---------------------------------
✡ Overhead costs of using DBMS: 
   The overhead cost is the ongoing cost to run the DBMS
   ➡ High initial investment
   ➡ Overhead for proviing security, concurrency control, recovery

✡ Databse & applications --> simple, well defined and no changes expected
✡ Multiple-user access --> not required

***********
CLASS 5
***********
History of Database Applications

Early Database Applications Using Hierarchical & Network Systems
----------------------------------------------------------------------
✡ Early systems --> based on 3 database models:
                    Hierarchical systems
                    Network model based systems
                    Inverted file systems



                                 Hierarchical Datababe Model

                                        Root
                                          |
    -------------------------------------------------------------------------------
    ⬇                                     ⬇                                       ⬇
Level 1                              Level 1                                   Level 1
    |                                     |                                       |
---------------                          -----------                          -------------
⬇             ⬇                          ⬇         ⬇                         ⬇            ⬇
Level 2     Level 2                  Level 2     Level 2                Level 2        Level2



     Network Database Model
               
         -------------Store------------
        |               |             |
   Client         Supervisor       Worker
       |             |             |   |
       |-------------|-------------|   |
                     |                 |
                 order               Item

✡ Main problem of early database systems --> not flexible to develop new queries and reorganizing data was difficult
✡ Another drwaback --> provided only programming language interfaces.
✡ Implemented in the mid-1960s, through 1970s and 1980s on large & expensive mainframe computers.

Providing Application Flexibilty with Relational Databases
-------------------------------------------------------------------
✡ Relational atabases (RDBMS) --> proposal by E.F Codd --> organizes data into tables which can be linked or related
✡ High-level query language --> introduces in relational data model
✡ Provides flexibility --> to quickly develop new queries & reorganize the databse as per the change in requirements.
✡ Early experimental relational systems (developed in 1970s) & the commercial RDBMS (developed in 1980s) --> quite slow
✡ Development of new storage & indexing techniques, better query processing --> performance of RDBMS improved
✡ Relational databases --> dominant type of database systems.

Object-Oriented Applications and the Need for More COmplex Databases
---------------------------------------------------------------------------
~ Emergence of object-oriented programming languages --> the developemnt of object-oriented databases.
~ Incorporated many of the useful object-oriented features --> data abstraction, encapsulation, inheritance
~ Mainly used in specialized applications --> engineering design, manufacturing systems etc.

Interchanging Data on the Web for E-Commerce
-------------------------------------------------
~ WWW (world wide web) --> large network of interconnected computers.
~ Users --> create documents using HTML (hyper text markup language) --> stores them on web servers.
~ Documents can be linked together through hyperlinks.
~ E-commerce (1990s)  - major web applications
~ Information on e-commerce web pages --> ynamically extracted data from DBMS (interchange of data)
~ Now XML (extended makrup language) --> primary standard for interchanging data

Extending Database Capabilities for New Applications
-----------------------------------------------------------
~ Scientific applications --> store large amounts of data from scientific experiments
~ Storage & retrieval of images
~ Storage & retrieval of videos
~ Data mining applications --> analyzing large amounts of data
~ Spatial applications --> weather information
~ Time series applications --> eg: daily sales information

~ Basic relational model --> not suitable
~ Reasons:
   More complex data structures were needed
   New data types were required
   New query language
   New storage & indexing techniques were needed


**************
CLASS 6
**************




        













 
